/**
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.kPIGenerator.impl;

import co.edu.uniandes.kPIGenerator.KPIGeneratorPackage;
import co.edu.uniandes.kPIGenerator.Phase;
import co.edu.uniandes.kPIGenerator.Task;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Phase</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.PhaseImpl#getPhaseName <em>Phase Name</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.PhaseImpl#getTasks <em>Tasks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PhaseImpl extends MinimalEObjectImpl.Container implements Phase
{
  /**
   * The default value of the '{@link #getPhaseName() <em>Phase Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhaseName()
   * @generated
   * @ordered
   */
  protected static final String PHASE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPhaseName() <em>Phase Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhaseName()
   * @generated
   * @ordered
   */
  protected String phaseName = PHASE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getTasks() <em>Tasks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTasks()
   * @generated
   * @ordered
   */
  protected EList<Task> tasks;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PhaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KPIGeneratorPackage.Literals.PHASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPhaseName()
  {
    return phaseName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPhaseName(String newPhaseName)
  {
    String oldPhaseName = phaseName;
    phaseName = newPhaseName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.PHASE__PHASE_NAME, oldPhaseName, phaseName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Task> getTasks()
  {
    if (tasks == null)
    {
      tasks = new EObjectContainmentEList<Task>(Task.class, this, KPIGeneratorPackage.PHASE__TASKS);
    }
    return tasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.PHASE__TASKS:
        return ((InternalEList<?>)getTasks()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.PHASE__PHASE_NAME:
        return getPhaseName();
      case KPIGeneratorPackage.PHASE__TASKS:
        return getTasks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.PHASE__PHASE_NAME:
        setPhaseName((String)newValue);
        return;
      case KPIGeneratorPackage.PHASE__TASKS:
        getTasks().clear();
        getTasks().addAll((Collection<? extends Task>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.PHASE__PHASE_NAME:
        setPhaseName(PHASE_NAME_EDEFAULT);
        return;
      case KPIGeneratorPackage.PHASE__TASKS:
        getTasks().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.PHASE__PHASE_NAME:
        return PHASE_NAME_EDEFAULT == null ? phaseName != null : !PHASE_NAME_EDEFAULT.equals(phaseName);
      case KPIGeneratorPackage.PHASE__TASKS:
        return tasks != null && !tasks.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (phaseName: ");
    result.append(phaseName);
    result.append(')');
    return result.toString();
  }

} //PhaseImpl
