/**
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.kPIGenerator.impl;

import co.edu.uniandes.kPIGenerator.KPIGeneratorPackage;
import co.edu.uniandes.kPIGenerator.TaskName;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task Name</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskNameImpl#getPhase <em>Phase</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskNameImpl#getSubphase <em>Subphase</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskNameImpl#getUseCase <em>Use Case</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskNameImpl#getVersion <em>Version</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskNameImpl extends MinimalEObjectImpl.Container implements TaskName
{
  /**
   * The default value of the '{@link #getPhase() <em>Phase</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhase()
   * @generated
   * @ordered
   */
  protected static final String PHASE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPhase() <em>Phase</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhase()
   * @generated
   * @ordered
   */
  protected String phase = PHASE_EDEFAULT;

  /**
   * The default value of the '{@link #getSubphase() <em>Subphase</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubphase()
   * @generated
   * @ordered
   */
  protected static final String SUBPHASE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSubphase() <em>Subphase</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubphase()
   * @generated
   * @ordered
   */
  protected String subphase = SUBPHASE_EDEFAULT;

  /**
   * The default value of the '{@link #getUseCase() <em>Use Case</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCase()
   * @generated
   * @ordered
   */
  protected static final String USE_CASE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUseCase() <em>Use Case</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCase()
   * @generated
   * @ordered
   */
  protected String useCase = USE_CASE_EDEFAULT;

  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final int VERSION_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected int version = VERSION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskNameImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KPIGeneratorPackage.Literals.TASK_NAME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPhase()
  {
    return phase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPhase(String newPhase)
  {
    String oldPhase = phase;
    phase = newPhase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK_NAME__PHASE, oldPhase, phase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSubphase()
  {
    return subphase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSubphase(String newSubphase)
  {
    String oldSubphase = subphase;
    subphase = newSubphase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK_NAME__SUBPHASE, oldSubphase, subphase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUseCase()
  {
    return useCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUseCase(String newUseCase)
  {
    String oldUseCase = useCase;
    useCase = newUseCase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK_NAME__USE_CASE, oldUseCase, useCase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVersion(int newVersion)
  {
    int oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK_NAME__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK_NAME__PHASE:
        return getPhase();
      case KPIGeneratorPackage.TASK_NAME__SUBPHASE:
        return getSubphase();
      case KPIGeneratorPackage.TASK_NAME__USE_CASE:
        return getUseCase();
      case KPIGeneratorPackage.TASK_NAME__VERSION:
        return getVersion();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK_NAME__PHASE:
        setPhase((String)newValue);
        return;
      case KPIGeneratorPackage.TASK_NAME__SUBPHASE:
        setSubphase((String)newValue);
        return;
      case KPIGeneratorPackage.TASK_NAME__USE_CASE:
        setUseCase((String)newValue);
        return;
      case KPIGeneratorPackage.TASK_NAME__VERSION:
        setVersion((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK_NAME__PHASE:
        setPhase(PHASE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK_NAME__SUBPHASE:
        setSubphase(SUBPHASE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK_NAME__USE_CASE:
        setUseCase(USE_CASE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK_NAME__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK_NAME__PHASE:
        return PHASE_EDEFAULT == null ? phase != null : !PHASE_EDEFAULT.equals(phase);
      case KPIGeneratorPackage.TASK_NAME__SUBPHASE:
        return SUBPHASE_EDEFAULT == null ? subphase != null : !SUBPHASE_EDEFAULT.equals(subphase);
      case KPIGeneratorPackage.TASK_NAME__USE_CASE:
        return USE_CASE_EDEFAULT == null ? useCase != null : !USE_CASE_EDEFAULT.equals(useCase);
      case KPIGeneratorPackage.TASK_NAME__VERSION:
        return version != VERSION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (phase: ");
    result.append(phase);
    result.append(", subphase: ");
    result.append(subphase);
    result.append(", useCase: ");
    result.append(useCase);
    result.append(", version: ");
    result.append(version);
    result.append(')');
    return result.toString();
  }

} //TaskNameImpl
