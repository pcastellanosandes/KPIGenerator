/**
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.kPIGenerator.impl;

import co.edu.uniandes.kPIGenerator.BOOL;
import co.edu.uniandes.kPIGenerator.KPIGeneratorPackage;
import co.edu.uniandes.kPIGenerator.Task;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTaskId <em>Task Id</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTaskList <em>Task List</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getMilestone <em>Milestone</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTask <em>Task</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTaskDescription <em>Task Description</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getStartDate <em>Start Date</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getDueDate <em>Due Date</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getPriority <em>Priority</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getPrivate <em>Private</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getProgress <em>Progress</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getAssignedTo <em>Assigned To</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getCreatedDate <em>Created Date</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getCompletedDate <em>Completed Date</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTimeLogged <em>Time Logged</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getBillableMinutes <em>Billable Minutes</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTaskParent <em>Task Parent</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getCompletedOnTime <em>Completed On Time</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTimeEstimated <em>Time Estimated</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTags <em>Tags</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskImpl extends MinimalEObjectImpl.Container implements Task
{
  /**
   * The default value of the '{@link #getTaskId() <em>Task Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskId()
   * @generated
   * @ordered
   */
  protected static final int TASK_ID_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTaskId() <em>Task Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskId()
   * @generated
   * @ordered
   */
  protected int taskId = TASK_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getTaskList() <em>Task List</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskList()
   * @generated
   * @ordered
   */
  protected static final String TASK_LIST_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTaskList() <em>Task List</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskList()
   * @generated
   * @ordered
   */
  protected String taskList = TASK_LIST_EDEFAULT;

  /**
   * The default value of the '{@link #getMilestone() <em>Milestone</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMilestone()
   * @generated
   * @ordered
   */
  protected static final String MILESTONE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMilestone() <em>Milestone</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMilestone()
   * @generated
   * @ordered
   */
  protected String milestone = MILESTONE_EDEFAULT;

  /**
   * The cached value of the '{@link #getTask() <em>Task</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTask()
   * @generated
   * @ordered
   */
  protected EList<EObject> task;

  /**
   * The default value of the '{@link #getTaskDescription() <em>Task Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskDescription()
   * @generated
   * @ordered
   */
  protected static final String TASK_DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTaskDescription() <em>Task Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskDescription()
   * @generated
   * @ordered
   */
  protected String taskDescription = TASK_DESCRIPTION_EDEFAULT;

  /**
   * The default value of the '{@link #getStartDate() <em>Start Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartDate()
   * @generated
   * @ordered
   */
  protected static final String START_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStartDate() <em>Start Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartDate()
   * @generated
   * @ordered
   */
  protected String startDate = START_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getDueDate() <em>Due Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDueDate()
   * @generated
   * @ordered
   */
  protected static final String DUE_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDueDate() <em>Due Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDueDate()
   * @generated
   * @ordered
   */
  protected String dueDate = DUE_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getPriority() <em>Priority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPriority()
   * @generated
   * @ordered
   */
  protected static final String PRIORITY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPriority() <em>Priority</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPriority()
   * @generated
   * @ordered
   */
  protected String priority = PRIORITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getPrivate() <em>Private</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrivate()
   * @generated
   * @ordered
   */
  protected BOOL private_;

  /**
   * The default value of the '{@link #getProgress() <em>Progress</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgress()
   * @generated
   * @ordered
   */
  protected static final int PROGRESS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getProgress() <em>Progress</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgress()
   * @generated
   * @ordered
   */
  protected int progress = PROGRESS_EDEFAULT;

  /**
   * The default value of the '{@link #getAssignedTo() <em>Assigned To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignedTo()
   * @generated
   * @ordered
   */
  protected static final String ASSIGNED_TO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAssignedTo() <em>Assigned To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignedTo()
   * @generated
   * @ordered
   */
  protected String assignedTo = ASSIGNED_TO_EDEFAULT;

  /**
   * The default value of the '{@link #getCreatedDate() <em>Created Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreatedDate()
   * @generated
   * @ordered
   */
  protected static final String CREATED_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCreatedDate() <em>Created Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreatedDate()
   * @generated
   * @ordered
   */
  protected String createdDate = CREATED_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getCompletedDate() <em>Completed Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompletedDate()
   * @generated
   * @ordered
   */
  protected static final String COMPLETED_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompletedDate() <em>Completed Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompletedDate()
   * @generated
   * @ordered
   */
  protected String completedDate = COMPLETED_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeLogged() <em>Time Logged</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeLogged()
   * @generated
   * @ordered
   */
  protected static final int TIME_LOGGED_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTimeLogged() <em>Time Logged</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeLogged()
   * @generated
   * @ordered
   */
  protected int timeLogged = TIME_LOGGED_EDEFAULT;

  /**
   * The default value of the '{@link #getBillableMinutes() <em>Billable Minutes</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBillableMinutes()
   * @generated
   * @ordered
   */
  protected static final int BILLABLE_MINUTES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getBillableMinutes() <em>Billable Minutes</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBillableMinutes()
   * @generated
   * @ordered
   */
  protected int billableMinutes = BILLABLE_MINUTES_EDEFAULT;

  /**
   * The default value of the '{@link #getTaskParent() <em>Task Parent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskParent()
   * @generated
   * @ordered
   */
  protected static final int TASK_PARENT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTaskParent() <em>Task Parent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskParent()
   * @generated
   * @ordered
   */
  protected int taskParent = TASK_PARENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getCompletedOnTime() <em>Completed On Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompletedOnTime()
   * @generated
   * @ordered
   */
  protected BOOL completedOnTime;

  /**
   * The default value of the '{@link #getTimeEstimated() <em>Time Estimated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeEstimated()
   * @generated
   * @ordered
   */
  protected static final int TIME_ESTIMATED_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTimeEstimated() <em>Time Estimated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeEstimated()
   * @generated
   * @ordered
   */
  protected int timeEstimated = TIME_ESTIMATED_EDEFAULT;

  /**
   * The default value of the '{@link #getTags() <em>Tags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTags()
   * @generated
   * @ordered
   */
  protected static final String TAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTags() <em>Tags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTags()
   * @generated
   * @ordered
   */
  protected String tags = TAGS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KPIGeneratorPackage.Literals.TASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTaskId()
  {
    return taskId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTaskId(int newTaskId)
  {
    int oldTaskId = taskId;
    taskId = newTaskId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TASK_ID, oldTaskId, taskId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTaskList()
  {
    return taskList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTaskList(String newTaskList)
  {
    String oldTaskList = taskList;
    taskList = newTaskList;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TASK_LIST, oldTaskList, taskList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMilestone()
  {
    return milestone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMilestone(String newMilestone)
  {
    String oldMilestone = milestone;
    milestone = newMilestone;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__MILESTONE, oldMilestone, milestone));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<EObject> getTask()
  {
    if (task == null)
    {
      task = new EObjectContainmentEList<EObject>(EObject.class, this, KPIGeneratorPackage.TASK__TASK);
    }
    return task;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTaskDescription()
  {
    return taskDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTaskDescription(String newTaskDescription)
  {
    String oldTaskDescription = taskDescription;
    taskDescription = newTaskDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TASK_DESCRIPTION, oldTaskDescription, taskDescription));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStartDate()
  {
    return startDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStartDate(String newStartDate)
  {
    String oldStartDate = startDate;
    startDate = newStartDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__START_DATE, oldStartDate, startDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDueDate()
  {
    return dueDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDueDate(String newDueDate)
  {
    String oldDueDate = dueDate;
    dueDate = newDueDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__DUE_DATE, oldDueDate, dueDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPriority()
  {
    return priority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPriority(String newPriority)
  {
    String oldPriority = priority;
    priority = newPriority;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__PRIORITY, oldPriority, priority));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOL getPrivate()
  {
    return private_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrivate(BOOL newPrivate, NotificationChain msgs)
  {
    BOOL oldPrivate = private_;
    private_ = newPrivate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__PRIVATE, oldPrivate, newPrivate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrivate(BOOL newPrivate)
  {
    if (newPrivate != private_)
    {
      NotificationChain msgs = null;
      if (private_ != null)
        msgs = ((InternalEObject)private_).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KPIGeneratorPackage.TASK__PRIVATE, null, msgs);
      if (newPrivate != null)
        msgs = ((InternalEObject)newPrivate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KPIGeneratorPackage.TASK__PRIVATE, null, msgs);
      msgs = basicSetPrivate(newPrivate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__PRIVATE, newPrivate, newPrivate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getProgress()
  {
    return progress;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProgress(int newProgress)
  {
    int oldProgress = progress;
    progress = newProgress;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__PROGRESS, oldProgress, progress));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAssignedTo()
  {
    return assignedTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAssignedTo(String newAssignedTo)
  {
    String oldAssignedTo = assignedTo;
    assignedTo = newAssignedTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__ASSIGNED_TO, oldAssignedTo, assignedTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCreatedDate()
  {
    return createdDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCreatedDate(String newCreatedDate)
  {
    String oldCreatedDate = createdDate;
    createdDate = newCreatedDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__CREATED_DATE, oldCreatedDate, createdDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCompletedDate()
  {
    return completedDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompletedDate(String newCompletedDate)
  {
    String oldCompletedDate = completedDate;
    completedDate = newCompletedDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__COMPLETED_DATE, oldCompletedDate, completedDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTimeLogged()
  {
    return timeLogged;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeLogged(int newTimeLogged)
  {
    int oldTimeLogged = timeLogged;
    timeLogged = newTimeLogged;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TIME_LOGGED, oldTimeLogged, timeLogged));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getBillableMinutes()
  {
    return billableMinutes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBillableMinutes(int newBillableMinutes)
  {
    int oldBillableMinutes = billableMinutes;
    billableMinutes = newBillableMinutes;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__BILLABLE_MINUTES, oldBillableMinutes, billableMinutes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTaskParent()
  {
    return taskParent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTaskParent(int newTaskParent)
  {
    int oldTaskParent = taskParent;
    taskParent = newTaskParent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TASK_PARENT, oldTaskParent, taskParent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BOOL getCompletedOnTime()
  {
    return completedOnTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompletedOnTime(BOOL newCompletedOnTime, NotificationChain msgs)
  {
    BOOL oldCompletedOnTime = completedOnTime;
    completedOnTime = newCompletedOnTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__COMPLETED_ON_TIME, oldCompletedOnTime, newCompletedOnTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompletedOnTime(BOOL newCompletedOnTime)
  {
    if (newCompletedOnTime != completedOnTime)
    {
      NotificationChain msgs = null;
      if (completedOnTime != null)
        msgs = ((InternalEObject)completedOnTime).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - KPIGeneratorPackage.TASK__COMPLETED_ON_TIME, null, msgs);
      if (newCompletedOnTime != null)
        msgs = ((InternalEObject)newCompletedOnTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - KPIGeneratorPackage.TASK__COMPLETED_ON_TIME, null, msgs);
      msgs = basicSetCompletedOnTime(newCompletedOnTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__COMPLETED_ON_TIME, newCompletedOnTime, newCompletedOnTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTimeEstimated()
  {
    return timeEstimated;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeEstimated(int newTimeEstimated)
  {
    int oldTimeEstimated = timeEstimated;
    timeEstimated = newTimeEstimated;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TIME_ESTIMATED, oldTimeEstimated, timeEstimated));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTags()
  {
    return tags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTags(String newTags)
  {
    String oldTags = tags;
    tags = newTags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TAGS, oldTags, tags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK:
        return ((InternalEList<?>)getTask()).basicRemove(otherEnd, msgs);
      case KPIGeneratorPackage.TASK__PRIVATE:
        return basicSetPrivate(null, msgs);
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        return basicSetCompletedOnTime(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK_ID:
        return getTaskId();
      case KPIGeneratorPackage.TASK__TASK_LIST:
        return getTaskList();
      case KPIGeneratorPackage.TASK__MILESTONE:
        return getMilestone();
      case KPIGeneratorPackage.TASK__TASK:
        return getTask();
      case KPIGeneratorPackage.TASK__TASK_DESCRIPTION:
        return getTaskDescription();
      case KPIGeneratorPackage.TASK__START_DATE:
        return getStartDate();
      case KPIGeneratorPackage.TASK__DUE_DATE:
        return getDueDate();
      case KPIGeneratorPackage.TASK__PRIORITY:
        return getPriority();
      case KPIGeneratorPackage.TASK__PRIVATE:
        return getPrivate();
      case KPIGeneratorPackage.TASK__PROGRESS:
        return getProgress();
      case KPIGeneratorPackage.TASK__ASSIGNED_TO:
        return getAssignedTo();
      case KPIGeneratorPackage.TASK__CREATED_DATE:
        return getCreatedDate();
      case KPIGeneratorPackage.TASK__COMPLETED_DATE:
        return getCompletedDate();
      case KPIGeneratorPackage.TASK__TIME_LOGGED:
        return getTimeLogged();
      case KPIGeneratorPackage.TASK__BILLABLE_MINUTES:
        return getBillableMinutes();
      case KPIGeneratorPackage.TASK__TASK_PARENT:
        return getTaskParent();
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        return getCompletedOnTime();
      case KPIGeneratorPackage.TASK__TIME_ESTIMATED:
        return getTimeEstimated();
      case KPIGeneratorPackage.TASK__TAGS:
        return getTags();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK_ID:
        setTaskId((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__TASK_LIST:
        setTaskList((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__MILESTONE:
        setMilestone((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__TASK:
        getTask().clear();
        getTask().addAll((Collection<? extends EObject>)newValue);
        return;
      case KPIGeneratorPackage.TASK__TASK_DESCRIPTION:
        setTaskDescription((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__START_DATE:
        setStartDate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__DUE_DATE:
        setDueDate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__PRIORITY:
        setPriority((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__PRIVATE:
        setPrivate((BOOL)newValue);
        return;
      case KPIGeneratorPackage.TASK__PROGRESS:
        setProgress((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__ASSIGNED_TO:
        setAssignedTo((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__CREATED_DATE:
        setCreatedDate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__COMPLETED_DATE:
        setCompletedDate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__TIME_LOGGED:
        setTimeLogged((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__BILLABLE_MINUTES:
        setBillableMinutes((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__TASK_PARENT:
        setTaskParent((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        setCompletedOnTime((BOOL)newValue);
        return;
      case KPIGeneratorPackage.TASK__TIME_ESTIMATED:
        setTimeEstimated((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__TAGS:
        setTags((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK_ID:
        setTaskId(TASK_ID_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__TASK_LIST:
        setTaskList(TASK_LIST_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__MILESTONE:
        setMilestone(MILESTONE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__TASK:
        getTask().clear();
        return;
      case KPIGeneratorPackage.TASK__TASK_DESCRIPTION:
        setTaskDescription(TASK_DESCRIPTION_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__START_DATE:
        setStartDate(START_DATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__DUE_DATE:
        setDueDate(DUE_DATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__PRIORITY:
        setPriority(PRIORITY_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__PRIVATE:
        setPrivate((BOOL)null);
        return;
      case KPIGeneratorPackage.TASK__PROGRESS:
        setProgress(PROGRESS_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__ASSIGNED_TO:
        setAssignedTo(ASSIGNED_TO_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__CREATED_DATE:
        setCreatedDate(CREATED_DATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__COMPLETED_DATE:
        setCompletedDate(COMPLETED_DATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__TIME_LOGGED:
        setTimeLogged(TIME_LOGGED_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__BILLABLE_MINUTES:
        setBillableMinutes(BILLABLE_MINUTES_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__TASK_PARENT:
        setTaskParent(TASK_PARENT_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        setCompletedOnTime((BOOL)null);
        return;
      case KPIGeneratorPackage.TASK__TIME_ESTIMATED:
        setTimeEstimated(TIME_ESTIMATED_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__TAGS:
        setTags(TAGS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK_ID:
        return taskId != TASK_ID_EDEFAULT;
      case KPIGeneratorPackage.TASK__TASK_LIST:
        return TASK_LIST_EDEFAULT == null ? taskList != null : !TASK_LIST_EDEFAULT.equals(taskList);
      case KPIGeneratorPackage.TASK__MILESTONE:
        return MILESTONE_EDEFAULT == null ? milestone != null : !MILESTONE_EDEFAULT.equals(milestone);
      case KPIGeneratorPackage.TASK__TASK:
        return task != null && !task.isEmpty();
      case KPIGeneratorPackage.TASK__TASK_DESCRIPTION:
        return TASK_DESCRIPTION_EDEFAULT == null ? taskDescription != null : !TASK_DESCRIPTION_EDEFAULT.equals(taskDescription);
      case KPIGeneratorPackage.TASK__START_DATE:
        return START_DATE_EDEFAULT == null ? startDate != null : !START_DATE_EDEFAULT.equals(startDate);
      case KPIGeneratorPackage.TASK__DUE_DATE:
        return DUE_DATE_EDEFAULT == null ? dueDate != null : !DUE_DATE_EDEFAULT.equals(dueDate);
      case KPIGeneratorPackage.TASK__PRIORITY:
        return PRIORITY_EDEFAULT == null ? priority != null : !PRIORITY_EDEFAULT.equals(priority);
      case KPIGeneratorPackage.TASK__PRIVATE:
        return private_ != null;
      case KPIGeneratorPackage.TASK__PROGRESS:
        return progress != PROGRESS_EDEFAULT;
      case KPIGeneratorPackage.TASK__ASSIGNED_TO:
        return ASSIGNED_TO_EDEFAULT == null ? assignedTo != null : !ASSIGNED_TO_EDEFAULT.equals(assignedTo);
      case KPIGeneratorPackage.TASK__CREATED_DATE:
        return CREATED_DATE_EDEFAULT == null ? createdDate != null : !CREATED_DATE_EDEFAULT.equals(createdDate);
      case KPIGeneratorPackage.TASK__COMPLETED_DATE:
        return COMPLETED_DATE_EDEFAULT == null ? completedDate != null : !COMPLETED_DATE_EDEFAULT.equals(completedDate);
      case KPIGeneratorPackage.TASK__TIME_LOGGED:
        return timeLogged != TIME_LOGGED_EDEFAULT;
      case KPIGeneratorPackage.TASK__BILLABLE_MINUTES:
        return billableMinutes != BILLABLE_MINUTES_EDEFAULT;
      case KPIGeneratorPackage.TASK__TASK_PARENT:
        return taskParent != TASK_PARENT_EDEFAULT;
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        return completedOnTime != null;
      case KPIGeneratorPackage.TASK__TIME_ESTIMATED:
        return timeEstimated != TIME_ESTIMATED_EDEFAULT;
      case KPIGeneratorPackage.TASK__TAGS:
        return TAGS_EDEFAULT == null ? tags != null : !TAGS_EDEFAULT.equals(tags);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (taskId: ");
    result.append(taskId);
    result.append(", taskList: ");
    result.append(taskList);
    result.append(", milestone: ");
    result.append(milestone);
    result.append(", TaskDescription: ");
    result.append(taskDescription);
    result.append(", startDate: ");
    result.append(startDate);
    result.append(", DueDate: ");
    result.append(dueDate);
    result.append(", priority: ");
    result.append(priority);
    result.append(", progress: ");
    result.append(progress);
    result.append(", assignedTo: ");
    result.append(assignedTo);
    result.append(", createdDate: ");
    result.append(createdDate);
    result.append(", completedDate: ");
    result.append(completedDate);
    result.append(", timeLogged: ");
    result.append(timeLogged);
    result.append(", billableMinutes: ");
    result.append(billableMinutes);
    result.append(", TaskParent: ");
    result.append(taskParent);
    result.append(", timeEstimated: ");
    result.append(timeEstimated);
    result.append(", tags: ");
    result.append(tags);
    result.append(')');
    return result.toString();
  }

} //TaskImpl
