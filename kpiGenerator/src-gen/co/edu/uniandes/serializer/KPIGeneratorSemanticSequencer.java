/*
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.serializer;

import co.edu.uniandes.kPIGenerator.BOOL;
import co.edu.uniandes.kPIGenerator.KPIGeneratorPackage;
import co.edu.uniandes.kPIGenerator.Status;
import co.edu.uniandes.kPIGenerator.Task;
import co.edu.uniandes.services.KPIGeneratorGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class KPIGeneratorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KPIGeneratorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KPIGeneratorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KPIGeneratorPackage.BOOL:
				sequence_BOOL(context, (BOOL) semanticObject); 
				return; 
			case KPIGeneratorPackage.STATUS:
				sequence_Status(context, (Status) semanticObject); 
				return; 
			case KPIGeneratorPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BOOL returns BOOL
	 *
	 * Constraint:
	 *     {BOOL}
	 */
	protected void sequence_BOOL(ISerializationContext context, BOOL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Status returns Status
	 *
	 * Constraint:
	 *     ((statusName='completed' | statusName='new') text=CADENA)
	 */
	protected void sequence_Status(ISerializationContext context, Status semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (
	 *         id=INT 
	 *         project=CADENA 
	 *         milestone=CADENA? 
	 *         name=CADENA 
	 *         TaskDescription=CADENA? 
	 *         startDate=DATE 
	 *         DueDate=DATE 
	 *         priority=STRING? 
	 *         private=BOOL 
	 *         progress=INT 
	 *         Task+=Status 
	 *         assignedTo=CADENA 
	 *         createdDate=DATEHOUR 
	 *         completedDate=DATEHOUR 
	 *         timeLogged=INT? 
	 *         billableMinutes=INT? 
	 *         parentTask=[Task|ID]? 
	 *         completedOnTime=BOOL 
	 *         timeEstimated=INT 
	 *         tags=CADENA?
	 *     )
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
