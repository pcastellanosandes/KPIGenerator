/**
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.kPIGenerator.impl;

import co.edu.uniandes.kPIGenerator.KPIGeneratorPackage;
import co.edu.uniandes.kPIGenerator.Task;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Task</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTaskId <em>Task Id</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTaskName <em>Task Name</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getUseCase <em>Use Case</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getSequenceNumber <em>Sequence Number</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getStartDate <em>Start Date</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getDueDate <em>Due Date</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getIsPrivate <em>Is Private</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getProgress <em>Progress</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getStatusName <em>Status Name</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getStatusText <em>Status Text</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getAssignedTo <em>Assigned To</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getCreatedDate <em>Created Date</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getCompletedDate <em>Completed Date</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTimeLoggedMin <em>Time Logged Min</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getBillableTime <em>Billable Time</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getCompletedOnTime <em>Completed On Time</em>}</li>
 *   <li>{@link co.edu.uniandes.kPIGenerator.impl.TaskImpl#getTimeEstimated <em>Time Estimated</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TaskImpl extends MinimalEObjectImpl.Container implements Task
{
  /**
   * The default value of the '{@link #getTaskId() <em>Task Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskId()
   * @generated
   * @ordered
   */
  protected static final int TASK_ID_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTaskId() <em>Task Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskId()
   * @generated
   * @ordered
   */
  protected int taskId = TASK_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getTaskName() <em>Task Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskName()
   * @generated
   * @ordered
   */
  protected static final String TASK_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTaskName() <em>Task Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTaskName()
   * @generated
   * @ordered
   */
  protected String taskName = TASK_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getUseCase() <em>Use Case</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCase()
   * @generated
   * @ordered
   */
  protected static final String USE_CASE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getUseCase() <em>Use Case</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUseCase()
   * @generated
   * @ordered
   */
  protected String useCase = USE_CASE_EDEFAULT;

  /**
   * The default value of the '{@link #getSequenceNumber() <em>Sequence Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequenceNumber()
   * @generated
   * @ordered
   */
  protected static final String SEQUENCE_NUMBER_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSequenceNumber() <em>Sequence Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSequenceNumber()
   * @generated
   * @ordered
   */
  protected String sequenceNumber = SEQUENCE_NUMBER_EDEFAULT;

  /**
   * The default value of the '{@link #getStartDate() <em>Start Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartDate()
   * @generated
   * @ordered
   */
  protected static final String START_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStartDate() <em>Start Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartDate()
   * @generated
   * @ordered
   */
  protected String startDate = START_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getDueDate() <em>Due Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDueDate()
   * @generated
   * @ordered
   */
  protected static final String DUE_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDueDate() <em>Due Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDueDate()
   * @generated
   * @ordered
   */
  protected String dueDate = DUE_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getIsPrivate() <em>Is Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsPrivate()
   * @generated
   * @ordered
   */
  protected static final String IS_PRIVATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIsPrivate() <em>Is Private</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsPrivate()
   * @generated
   * @ordered
   */
  protected String isPrivate = IS_PRIVATE_EDEFAULT;

  /**
   * The default value of the '{@link #getProgress() <em>Progress</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgress()
   * @generated
   * @ordered
   */
  protected static final int PROGRESS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getProgress() <em>Progress</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProgress()
   * @generated
   * @ordered
   */
  protected int progress = PROGRESS_EDEFAULT;

  /**
   * The default value of the '{@link #getStatusName() <em>Status Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatusName()
   * @generated
   * @ordered
   */
  protected static final String STATUS_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStatusName() <em>Status Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatusName()
   * @generated
   * @ordered
   */
  protected String statusName = STATUS_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getStatusText() <em>Status Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatusText()
   * @generated
   * @ordered
   */
  protected static final String STATUS_TEXT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStatusText() <em>Status Text</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatusText()
   * @generated
   * @ordered
   */
  protected String statusText = STATUS_TEXT_EDEFAULT;

  /**
   * The default value of the '{@link #getAssignedTo() <em>Assigned To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignedTo()
   * @generated
   * @ordered
   */
  protected static final String ASSIGNED_TO_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAssignedTo() <em>Assigned To</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAssignedTo()
   * @generated
   * @ordered
   */
  protected String assignedTo = ASSIGNED_TO_EDEFAULT;

  /**
   * The default value of the '{@link #getCreatedDate() <em>Created Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreatedDate()
   * @generated
   * @ordered
   */
  protected static final String CREATED_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCreatedDate() <em>Created Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCreatedDate()
   * @generated
   * @ordered
   */
  protected String createdDate = CREATED_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getCompletedDate() <em>Completed Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompletedDate()
   * @generated
   * @ordered
   */
  protected static final String COMPLETED_DATE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompletedDate() <em>Completed Date</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompletedDate()
   * @generated
   * @ordered
   */
  protected String completedDate = COMPLETED_DATE_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeLoggedMin() <em>Time Logged Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeLoggedMin()
   * @generated
   * @ordered
   */
  protected static final int TIME_LOGGED_MIN_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTimeLoggedMin() <em>Time Logged Min</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeLoggedMin()
   * @generated
   * @ordered
   */
  protected int timeLoggedMin = TIME_LOGGED_MIN_EDEFAULT;

  /**
   * The default value of the '{@link #getBillableTime() <em>Billable Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBillableTime()
   * @generated
   * @ordered
   */
  protected static final int BILLABLE_TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getBillableTime() <em>Billable Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBillableTime()
   * @generated
   * @ordered
   */
  protected int billableTime = BILLABLE_TIME_EDEFAULT;

  /**
   * The default value of the '{@link #getCompletedOnTime() <em>Completed On Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompletedOnTime()
   * @generated
   * @ordered
   */
  protected static final String COMPLETED_ON_TIME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCompletedOnTime() <em>Completed On Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompletedOnTime()
   * @generated
   * @ordered
   */
  protected String completedOnTime = COMPLETED_ON_TIME_EDEFAULT;

  /**
   * The default value of the '{@link #getTimeEstimated() <em>Time Estimated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeEstimated()
   * @generated
   * @ordered
   */
  protected static final int TIME_ESTIMATED_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTimeEstimated() <em>Time Estimated</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeEstimated()
   * @generated
   * @ordered
   */
  protected int timeEstimated = TIME_ESTIMATED_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TaskImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return KPIGeneratorPackage.Literals.TASK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTaskId()
  {
    return taskId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTaskId(int newTaskId)
  {
    int oldTaskId = taskId;
    taskId = newTaskId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TASK_ID, oldTaskId, taskId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getTaskName()
  {
    return taskName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTaskName(String newTaskName)
  {
    String oldTaskName = taskName;
    taskName = newTaskName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TASK_NAME, oldTaskName, taskName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getUseCase()
  {
    return useCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUseCase(String newUseCase)
  {
    String oldUseCase = useCase;
    useCase = newUseCase;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__USE_CASE, oldUseCase, useCase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSequenceNumber()
  {
    return sequenceNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSequenceNumber(String newSequenceNumber)
  {
    String oldSequenceNumber = sequenceNumber;
    sequenceNumber = newSequenceNumber;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__SEQUENCE_NUMBER, oldSequenceNumber, sequenceNumber));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStartDate()
  {
    return startDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStartDate(String newStartDate)
  {
    String oldStartDate = startDate;
    startDate = newStartDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__START_DATE, oldStartDate, startDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDueDate()
  {
    return dueDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDueDate(String newDueDate)
  {
    String oldDueDate = dueDate;
    dueDate = newDueDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__DUE_DATE, oldDueDate, dueDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getIsPrivate()
  {
    return isPrivate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIsPrivate(String newIsPrivate)
  {
    String oldIsPrivate = isPrivate;
    isPrivate = newIsPrivate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__IS_PRIVATE, oldIsPrivate, isPrivate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getProgress()
  {
    return progress;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProgress(int newProgress)
  {
    int oldProgress = progress;
    progress = newProgress;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__PROGRESS, oldProgress, progress));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStatusName()
  {
    return statusName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatusName(String newStatusName)
  {
    String oldStatusName = statusName;
    statusName = newStatusName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__STATUS_NAME, oldStatusName, statusName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getStatusText()
  {
    return statusText;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStatusText(String newStatusText)
  {
    String oldStatusText = statusText;
    statusText = newStatusText;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__STATUS_TEXT, oldStatusText, statusText));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAssignedTo()
  {
    return assignedTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAssignedTo(String newAssignedTo)
  {
    String oldAssignedTo = assignedTo;
    assignedTo = newAssignedTo;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__ASSIGNED_TO, oldAssignedTo, assignedTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCreatedDate()
  {
    return createdDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCreatedDate(String newCreatedDate)
  {
    String oldCreatedDate = createdDate;
    createdDate = newCreatedDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__CREATED_DATE, oldCreatedDate, createdDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCompletedDate()
  {
    return completedDate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompletedDate(String newCompletedDate)
  {
    String oldCompletedDate = completedDate;
    completedDate = newCompletedDate;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__COMPLETED_DATE, oldCompletedDate, completedDate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTimeLoggedMin()
  {
    return timeLoggedMin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeLoggedMin(int newTimeLoggedMin)
  {
    int oldTimeLoggedMin = timeLoggedMin;
    timeLoggedMin = newTimeLoggedMin;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TIME_LOGGED_MIN, oldTimeLoggedMin, timeLoggedMin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getBillableTime()
  {
    return billableTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBillableTime(int newBillableTime)
  {
    int oldBillableTime = billableTime;
    billableTime = newBillableTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__BILLABLE_TIME, oldBillableTime, billableTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getCompletedOnTime()
  {
    return completedOnTime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCompletedOnTime(String newCompletedOnTime)
  {
    String oldCompletedOnTime = completedOnTime;
    completedOnTime = newCompletedOnTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__COMPLETED_ON_TIME, oldCompletedOnTime, completedOnTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTimeEstimated()
  {
    return timeEstimated;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeEstimated(int newTimeEstimated)
  {
    int oldTimeEstimated = timeEstimated;
    timeEstimated = newTimeEstimated;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, KPIGeneratorPackage.TASK__TIME_ESTIMATED, oldTimeEstimated, timeEstimated));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK_ID:
        return getTaskId();
      case KPIGeneratorPackage.TASK__TASK_NAME:
        return getTaskName();
      case KPIGeneratorPackage.TASK__USE_CASE:
        return getUseCase();
      case KPIGeneratorPackage.TASK__SEQUENCE_NUMBER:
        return getSequenceNumber();
      case KPIGeneratorPackage.TASK__START_DATE:
        return getStartDate();
      case KPIGeneratorPackage.TASK__DUE_DATE:
        return getDueDate();
      case KPIGeneratorPackage.TASK__IS_PRIVATE:
        return getIsPrivate();
      case KPIGeneratorPackage.TASK__PROGRESS:
        return getProgress();
      case KPIGeneratorPackage.TASK__STATUS_NAME:
        return getStatusName();
      case KPIGeneratorPackage.TASK__STATUS_TEXT:
        return getStatusText();
      case KPIGeneratorPackage.TASK__ASSIGNED_TO:
        return getAssignedTo();
      case KPIGeneratorPackage.TASK__CREATED_DATE:
        return getCreatedDate();
      case KPIGeneratorPackage.TASK__COMPLETED_DATE:
        return getCompletedDate();
      case KPIGeneratorPackage.TASK__TIME_LOGGED_MIN:
        return getTimeLoggedMin();
      case KPIGeneratorPackage.TASK__BILLABLE_TIME:
        return getBillableTime();
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        return getCompletedOnTime();
      case KPIGeneratorPackage.TASK__TIME_ESTIMATED:
        return getTimeEstimated();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK_ID:
        setTaskId((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__TASK_NAME:
        setTaskName((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__USE_CASE:
        setUseCase((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__SEQUENCE_NUMBER:
        setSequenceNumber((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__START_DATE:
        setStartDate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__DUE_DATE:
        setDueDate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__IS_PRIVATE:
        setIsPrivate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__PROGRESS:
        setProgress((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__STATUS_NAME:
        setStatusName((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__STATUS_TEXT:
        setStatusText((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__ASSIGNED_TO:
        setAssignedTo((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__CREATED_DATE:
        setCreatedDate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__COMPLETED_DATE:
        setCompletedDate((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__TIME_LOGGED_MIN:
        setTimeLoggedMin((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__BILLABLE_TIME:
        setBillableTime((Integer)newValue);
        return;
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        setCompletedOnTime((String)newValue);
        return;
      case KPIGeneratorPackage.TASK__TIME_ESTIMATED:
        setTimeEstimated((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK_ID:
        setTaskId(TASK_ID_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__TASK_NAME:
        setTaskName(TASK_NAME_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__USE_CASE:
        setUseCase(USE_CASE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__SEQUENCE_NUMBER:
        setSequenceNumber(SEQUENCE_NUMBER_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__START_DATE:
        setStartDate(START_DATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__DUE_DATE:
        setDueDate(DUE_DATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__IS_PRIVATE:
        setIsPrivate(IS_PRIVATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__PROGRESS:
        setProgress(PROGRESS_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__STATUS_NAME:
        setStatusName(STATUS_NAME_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__STATUS_TEXT:
        setStatusText(STATUS_TEXT_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__ASSIGNED_TO:
        setAssignedTo(ASSIGNED_TO_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__CREATED_DATE:
        setCreatedDate(CREATED_DATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__COMPLETED_DATE:
        setCompletedDate(COMPLETED_DATE_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__TIME_LOGGED_MIN:
        setTimeLoggedMin(TIME_LOGGED_MIN_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__BILLABLE_TIME:
        setBillableTime(BILLABLE_TIME_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        setCompletedOnTime(COMPLETED_ON_TIME_EDEFAULT);
        return;
      case KPIGeneratorPackage.TASK__TIME_ESTIMATED:
        setTimeEstimated(TIME_ESTIMATED_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case KPIGeneratorPackage.TASK__TASK_ID:
        return taskId != TASK_ID_EDEFAULT;
      case KPIGeneratorPackage.TASK__TASK_NAME:
        return TASK_NAME_EDEFAULT == null ? taskName != null : !TASK_NAME_EDEFAULT.equals(taskName);
      case KPIGeneratorPackage.TASK__USE_CASE:
        return USE_CASE_EDEFAULT == null ? useCase != null : !USE_CASE_EDEFAULT.equals(useCase);
      case KPIGeneratorPackage.TASK__SEQUENCE_NUMBER:
        return SEQUENCE_NUMBER_EDEFAULT == null ? sequenceNumber != null : !SEQUENCE_NUMBER_EDEFAULT.equals(sequenceNumber);
      case KPIGeneratorPackage.TASK__START_DATE:
        return START_DATE_EDEFAULT == null ? startDate != null : !START_DATE_EDEFAULT.equals(startDate);
      case KPIGeneratorPackage.TASK__DUE_DATE:
        return DUE_DATE_EDEFAULT == null ? dueDate != null : !DUE_DATE_EDEFAULT.equals(dueDate);
      case KPIGeneratorPackage.TASK__IS_PRIVATE:
        return IS_PRIVATE_EDEFAULT == null ? isPrivate != null : !IS_PRIVATE_EDEFAULT.equals(isPrivate);
      case KPIGeneratorPackage.TASK__PROGRESS:
        return progress != PROGRESS_EDEFAULT;
      case KPIGeneratorPackage.TASK__STATUS_NAME:
        return STATUS_NAME_EDEFAULT == null ? statusName != null : !STATUS_NAME_EDEFAULT.equals(statusName);
      case KPIGeneratorPackage.TASK__STATUS_TEXT:
        return STATUS_TEXT_EDEFAULT == null ? statusText != null : !STATUS_TEXT_EDEFAULT.equals(statusText);
      case KPIGeneratorPackage.TASK__ASSIGNED_TO:
        return ASSIGNED_TO_EDEFAULT == null ? assignedTo != null : !ASSIGNED_TO_EDEFAULT.equals(assignedTo);
      case KPIGeneratorPackage.TASK__CREATED_DATE:
        return CREATED_DATE_EDEFAULT == null ? createdDate != null : !CREATED_DATE_EDEFAULT.equals(createdDate);
      case KPIGeneratorPackage.TASK__COMPLETED_DATE:
        return COMPLETED_DATE_EDEFAULT == null ? completedDate != null : !COMPLETED_DATE_EDEFAULT.equals(completedDate);
      case KPIGeneratorPackage.TASK__TIME_LOGGED_MIN:
        return timeLoggedMin != TIME_LOGGED_MIN_EDEFAULT;
      case KPIGeneratorPackage.TASK__BILLABLE_TIME:
        return billableTime != BILLABLE_TIME_EDEFAULT;
      case KPIGeneratorPackage.TASK__COMPLETED_ON_TIME:
        return COMPLETED_ON_TIME_EDEFAULT == null ? completedOnTime != null : !COMPLETED_ON_TIME_EDEFAULT.equals(completedOnTime);
      case KPIGeneratorPackage.TASK__TIME_ESTIMATED:
        return timeEstimated != TIME_ESTIMATED_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (taskId: ");
    result.append(taskId);
    result.append(", taskName: ");
    result.append(taskName);
    result.append(", useCase: ");
    result.append(useCase);
    result.append(", sequenceNumber: ");
    result.append(sequenceNumber);
    result.append(", startDate: ");
    result.append(startDate);
    result.append(", dueDate: ");
    result.append(dueDate);
    result.append(", isPrivate: ");
    result.append(isPrivate);
    result.append(", progress: ");
    result.append(progress);
    result.append(", statusName: ");
    result.append(statusName);
    result.append(", statusText: ");
    result.append(statusText);
    result.append(", assignedTo: ");
    result.append(assignedTo);
    result.append(", createdDate: ");
    result.append(createdDate);
    result.append(", completedDate: ");
    result.append(completedDate);
    result.append(", timeLoggedMin: ");
    result.append(timeLoggedMin);
    result.append(", billableTime: ");
    result.append(billableTime);
    result.append(", completedOnTime: ");
    result.append(completedOnTime);
    result.append(", timeEstimated: ");
    result.append(timeEstimated);
    result.append(')');
    return result.toString();
  }

} //TaskImpl
