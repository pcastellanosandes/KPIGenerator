/*
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.serializer;

import co.edu.uniandes.kPIGenerator.KPIGeneratorPackage;
import co.edu.uniandes.kPIGenerator.Phase;
import co.edu.uniandes.kPIGenerator.Project;
import co.edu.uniandes.kPIGenerator.Root;
import co.edu.uniandes.kPIGenerator.Task;
import co.edu.uniandes.services.KPIGeneratorGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class KPIGeneratorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KPIGeneratorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KPIGeneratorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KPIGeneratorPackage.PHASE:
				sequence_Phase(context, (Phase) semanticObject); 
				return; 
			case KPIGeneratorPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case KPIGeneratorPackage.ROOT:
				sequence_Root(context, (Root) semanticObject); 
				return; 
			case KPIGeneratorPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Phase returns Phase
	 *
	 * Constraint:
	 *     (phaseName=CADENA tasks+=Task+)
	 */
	protected void sequence_Phase(ISerializationContext context, Phase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (projectName=CADENA phases+=Phase+)
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Root returns Root
	 *
	 * Constraint:
	 *     projects+=Project+
	 */
	protected void sequence_Root(ISerializationContext context, Root semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (
	 *         taskId=INT 
	 *         taskName=CADENA 
	 *         useCase=CADENA 
	 *         sequenceNumber=DOUBLE 
	 *         startDate=DATE 
	 *         dueDate=DATE 
	 *         (priority=CADENA | priority='-') 
	 *         isPrivate=CADENA 
	 *         progress=INT 
	 *         statusName=CADENA 
	 *         statusText=CADENA 
	 *         assignedTo=CADENA 
	 *         createdDate=DATEHOUR 
	 *         (completedDate=DATEHOUR | completedDate='-') 
	 *         timeLoggedMin=INT 
	 *         billableTime=INT 
	 *         completedOnTime=CADENA 
	 *         timeEstimated=INT
	 *     )
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
