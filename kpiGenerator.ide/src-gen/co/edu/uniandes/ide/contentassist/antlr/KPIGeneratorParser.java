/*
 * generated by Xtext 2.10.0
 */
package co.edu.uniandes.ide.contentassist.antlr;

import co.edu.uniandes.ide.contentassist.antlr.internal.InternalKPIGeneratorParser;
import co.edu.uniandes.services.KPIGeneratorGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class KPIGeneratorParser extends AbstractContentAssistParser {

	@Inject
	private KPIGeneratorGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalKPIGeneratorParser createParser() {
		InternalKPIGeneratorParser result = new InternalKPIGeneratorParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTaskAccess().getDescriptionAlternatives_17_0(), "rule__Task__DescriptionAlternatives_17_0");
					put(grammarAccess.getTaskAccess().getPriorityAlternatives_26_0(), "rule__Task__PriorityAlternatives_26_0");
					put(grammarAccess.getTaskAccess().getCompletedDateAlternatives_44_0(), "rule__Task__CompletedDateAlternatives_44_0");
					put(grammarAccess.getTaskAccess().getTagsAlternatives_59_0(), "rule__Task__TagsAlternatives_59_0");
					put(grammarAccess.getRootAccess().getGroup(), "rule__Root__Group__0");
					put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
					put(grammarAccess.getPhaseAccess().getGroup(), "rule__Phase__Group__0");
					put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
					put(grammarAccess.getStatusAccess().getGroup(), "rule__Status__Group__0");
					put(grammarAccess.getRootAccess().getProjectsAssignment_1(), "rule__Root__ProjectsAssignment_1");
					put(grammarAccess.getProjectAccess().getProjectNameAssignment_3(), "rule__Project__ProjectNameAssignment_3");
					put(grammarAccess.getProjectAccess().getPhasesAssignment_5(), "rule__Project__PhasesAssignment_5");
					put(grammarAccess.getPhaseAccess().getPhaseNameAssignment_3(), "rule__Phase__PhaseNameAssignment_3");
					put(grammarAccess.getPhaseAccess().getTasksAssignment_5(), "rule__Phase__TasksAssignment_5");
					put(grammarAccess.getTaskAccess().getTaskIdAssignment_3(), "rule__Task__TaskIdAssignment_3");
					put(grammarAccess.getTaskAccess().getTaskNameAssignment_6(), "rule__Task__TaskNameAssignment_6");
					put(grammarAccess.getTaskAccess().getUseCaseAssignment_9(), "rule__Task__UseCaseAssignment_9");
					put(grammarAccess.getTaskAccess().getSequenceNumberAssignment_12(), "rule__Task__SequenceNumberAssignment_12");
					put(grammarAccess.getTaskAccess().getDescriptionAssignment_17(), "rule__Task__DescriptionAssignment_17");
					put(grammarAccess.getTaskAccess().getStartDateAssignment_20(), "rule__Task__StartDateAssignment_20");
					put(grammarAccess.getTaskAccess().getDueDateAssignment_23(), "rule__Task__DueDateAssignment_23");
					put(grammarAccess.getTaskAccess().getPriorityAssignment_26(), "rule__Task__PriorityAssignment_26");
					put(grammarAccess.getTaskAccess().getIsPrivateAssignment_29(), "rule__Task__IsPrivateAssignment_29");
					put(grammarAccess.getTaskAccess().getProgressAssignment_32(), "rule__Task__ProgressAssignment_32");
					put(grammarAccess.getTaskAccess().getStatusAssignment_35(), "rule__Task__StatusAssignment_35");
					put(grammarAccess.getTaskAccess().getAssignedToAssignment_38(), "rule__Task__AssignedToAssignment_38");
					put(grammarAccess.getTaskAccess().getCreatedDateAssignment_41(), "rule__Task__CreatedDateAssignment_41");
					put(grammarAccess.getTaskAccess().getCompletedDateAssignment_44(), "rule__Task__CompletedDateAssignment_44");
					put(grammarAccess.getTaskAccess().getTimeLoggedMinAssignment_47(), "rule__Task__TimeLoggedMinAssignment_47");
					put(grammarAccess.getTaskAccess().getBillableTimeAssignment_50(), "rule__Task__BillableTimeAssignment_50");
					put(grammarAccess.getTaskAccess().getCompletedOnTimeAssignment_53(), "rule__Task__CompletedOnTimeAssignment_53");
					put(grammarAccess.getTaskAccess().getTimeEstimatedAssignment_56(), "rule__Task__TimeEstimatedAssignment_56");
					put(grammarAccess.getTaskAccess().getTagsAssignment_59(), "rule__Task__TagsAssignment_59");
					put(grammarAccess.getStatusAccess().getStatusNameAssignment_3(), "rule__Status__StatusNameAssignment_3");
					put(grammarAccess.getStatusAccess().getTextAssignment_6(), "rule__Status__TextAssignment_6");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalKPIGeneratorParser typedParser = (InternalKPIGeneratorParser) parser;
			typedParser.entryRuleRoot();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public KPIGeneratorGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(KPIGeneratorGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
