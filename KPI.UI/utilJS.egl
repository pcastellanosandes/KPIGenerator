function orderDates(a,b){
	if((a.Month < b.Month && a.Year == b.Year) || a.Year < b.Year)  return -1;
	if((a.Month > b.Month && a.Year == b.Year) || a.Year > b.Year) return 1;
	return 0;
}

function getDataByProject(){
	 var projectsData = [];
	 var projData ={};
	 var posProject=0, posPhase=0;
	 var completedDates=[];
	 var projects = convertToJSON();
	 
	 for(iProj=0; iProj < projects.length; iProj++)
	 {
	 	projData.name = projects[iProj].name;
	 	for(iPhase=0; iPhase < projects[iProj].phases.length; iPhase++)	
	 	{
	 		projData = getProjectData(projects[iProj].phases[iPhase].tasks, projData);
	 	}
	 	projData.Months.sort(orderDates);
	 	projectsData.push(projData);
	 } 
	 
	 return projectsData;
}

 function getProjectData(tasks, projData)
 {
	var taskDataByMonth;
	var task;
	var dateConverted;
	for(i=0; i < tasks.length; i++)
	{
		task = tasks[i];
		dateConverted = convertDate(task.createdDate);
		taskDataByMonth = findMonthData(projData, dateConverted.Text);
		taskDataByMonth.Month = dateConverted.Month;
		taskDataByMonth.Year = dateConverted.Year;
		
		if(!task.isReprocessedTask)
		{
			taskDataByMonth.Efficiency += task.timeEstimated === 0 ? 0 : task.timeLoggedMin/task.timeEstimated;
			taskDataByMonth.CountEfficiency++;
		}
		else
		{
			taskDataByMonth.ReprocessedEfficiency += task.timeEstimated === 0 ? 0 : task.timeLoggedMin/task.timeEstimated;
			taskDataByMonth.CountReprocessedEfficiency++;
		}
	} 	
	
	return projData;
 }
 
 function findMonthData(projData, monthToFind)
 {
 	var response, wasFound=false;
 	if(projData.Months === undefined)
 		projData.Months = [];
 		
 	for(j=0; j< projData.Months.length && !wasFound;j++){
 		if(projData.Months[j].DateText === monthToFind)
 		{
 			response = projData.Months[j];
 			wasFound = true;  
 		}
 	}
 	
 	if(!wasFound){
 		response = {};
 		response.DateText = monthToFind;
 		response.Efficiency = 0;
 		response.CountEfficiency = 0; 
 		response.ReprocessedEfficiency = 0;
 		response.CountReprocessedEfficiency = 0;
 		findMonth = false;
 		projData.Months.push(response);
 	}
 	
 	return response;
 }
 
 function convertDate(dateToConvert)
 {
 	var dateFinal = {};
 	var dateItems = dateToConvert.split(' ')[0].split('/');
 	
 	dateFinal.Text = dateItems[1]+ '/' +dateItems[2];
 	dateFinal.Month = dateItems[1];
 	dateFinal.Year = dateItems[2];
 	
 	return dateFinal;
 }
 
 function convertToJSON(){
	 var posPhase=0;
	 var projects = [];
	 var project;   
	 var task;
 	[%for(project in kpiGenerator!Root.all[0].projects){%]
 		project={};
	 	project.name = "[%=project.projectName%]"
	 	[%for(phase in project.phases){%]
	 		project.phases = [];
	 		project.phases[posPhase]= {}
	 		project.phases[posPhase].name = "[%=phase.phaseName%]"
	 		project.phases[posPhase].tasks = [];
	 		[%for(task in phase.tasks){%]
	 			task = {};
	 			task.name = "[%=task.taskName%]";
	 			task.createdDate = "[%=task.createdDate%]";
	 			task.completedDate = "[%=task.completedDate%]";
	 			task.timeLoggedMin = [%=task.timeLoggedMin%];
	 			task.timeEstimated = [%=task.timeEstimated%];
	 			task.isReprocessedTask = [%=task.isReprocessedTask%];
	 			project.phases[posPhase].tasks.push(task);
	 		[%}%]	
	 		posPhase++;
	 	[%}%]
	 	projects.push(project);
	 [%}%]
	 
	 return projects;
 }

function generateGraph(){

Highcharts.chart('container', {
        title: {
            text: 'Monthly Average Temperature',
            x: -20 //center
        },
        subtitle: {
            text: 'Source: WorldClimate.com',
            x: -20
        },
        xAxis: {
            categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
        },
        yAxis: {
            title: {
                text: 'Temperature (°C)'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        tooltip: {
            valueSuffix: '°C'
        },
        legend: {
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'middle',
            borderWidth: 0
        },
        series: [{
            name: 'Tokyo',
            data: [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]
        }, {
            name: 'New York',
            data: [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]
        }, {
            name: 'Berlin',
            data: [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]
        }, {
            name: 'London',
            data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]
        }]
    })




































}